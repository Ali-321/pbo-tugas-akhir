program inventory barang use mysql


-------------------------------------------------log create table --------------------------------------------------------------------
CREATE TABLE `d_beli` (
  `id` int(11) NOT NULL,
  `kd_beli` char(10) NOT NULL,
  `kd_brg` char(10) NOT NULL,
  `jml_beli` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `kd_beli` (`kd_beli`),
  KEY `kd_brg` (`kd_brg`),
  CONSTRAINT `d_beli_ibfk_1` FOREIGN KEY (`kd_beli`) REFERENCES `t_beli` (`kd_beli`) ON DELETE CASCADE,
  CONSTRAINT `d_beli_ibfk_2` FOREIGN KEY (`kd_brg`) REFERENCES `barang` (`kd_brg`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci


CREATE TABLE `d_jual` (
  `id` int(11) NOT NULL,
  `kd_jual` char(10) NOT NULL,
  `kd_brg` char(10) NOT NULL,
  `jml_jual` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `kd_jual` (`kd_jual`),
  KEY `kd_brg` (`kd_brg`),
  CONSTRAINT `d_jual_ibfk_1` FOREIGN KEY (`kd_jual`) REFERENCES `t_jual` (`kd_jual`) ON DELETE CASCADE,
  CONSTRAINT `d_jual_ibfk_2` FOREIGN KEY (`kd_brg`) REFERENCES `barang` (`kd_brg`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci



CREATE TABLE `t_beli` (
  `kd_beli` char(10) NOT NULL,
  `tgl_beli` date NOT NULL,
  `id_user` int(11) DEFAULT NULL,
  PRIMARY KEY (`kd_beli`),
  KEY `id_user` (`id_user`),
  CONSTRAINT `t_beli_ibfk_1` FOREIGN KEY (`id_user`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci


CREATE TABLE `t_jual` (
  `kd_jual` char(10) NOT NULL,
  `tgl_jual` date NOT NULL,
  `id_user` int(11) DEFAULT NULL,
  PRIMARY KEY (`kd_jual`),
  KEY `id_user` (`id_user`),
  CONSTRAINT `t_jual_ibfk_1` FOREIGN KEY (`id_user`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci



CREATE TABLE `barang` (
  `kd_brg` char(10) NOT NULL,
  `nm_brg` varchar(15) NOT NULL,
  `satuan` varchar(15) NOT NULL,
  `hrg_beli` int(11) NOT NULL,
  `hrg_jual` int(11) NOT NULL,
  `stok` int(11) NOT NULL,
  `stok_min` int(11) NOT NULL,
  PRIMARY KEY (`kd_brg`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci


CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `pswd` varchar(20) NOT NULL,
  `name` varchar(50) NOT NULL,
  `level` enum('administrator','user') NOT NULL,
  `status` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci

-----------------------------------------------------------------------------------------------------------------------------------







-----procedural mysql ----

#barang

<-() INSERT nilai kedalam tabel barang ()->
DELIMITER $$
CREATE PROCEDURE insert_barang(a char(10),b varchar(15),c varchar(15),d int,e int,f int,g int) 
BEGIN
INSERT INTO barang VALUES(a,b,c,d,e,f,g); 
END$$
DELIMITER ;
<---------------------------------->


<-() UPDATE value pada field tabel barang ()->
DELIMITER $$
CREATE PROCEDURE update_barang(a char(10),b varchar(15),c varchar(15),d int,e int,f int,g int) 
BEGIN
UPDATE barang SET nm_brg = b , satuan = c , hrg_beli = d, hrg_jual = e, stok = f , stok_min = g
WHERE kd_brg = a; 
END$$
DELIMITER ;
<---------------------------------->



<-() DELETE value pada field tabel barang ()->
DELIMITER $$
CREATE PROCEDURE delete_barang(a char(10)) 
BEGIN
DELETE FROM barang WHERE kd_brg = a; 
END$$
DELIMITER ;
<---------------------------------->

<-() SELECT * value pada field tabel barang ()->
DELIMITER $$
CREATE PROCEDURE get_barang() 
BEGIN
SELECT * FROM barang; 
END$$
DELIMITER ;
<---------------------------------->

#Users

<-() INSERT nilai kedalam tabel Users ()->
DELIMITER $$
CREATE PROCEDURE insert_users(a int,b varchar(20),c varchar(50),d enum("administrator","user"),e boolean) 
BEGIN
INSERT INTO users VALUES(a,b,c,d,e); 
END$$
DELIMITER ;
<---------------------------------->

<-() UPDATE value pada field tabel Users ()->
DELIMITER $$
CREATE PROCEDURE update_users(a int,b varchar(20),c varchar(50),d enum("administrator","user"),e boolean)
BEGIN
UPDATE users SET pswd = b , name = c , level = d, status = e WHERE id = a; 
END$$
DELIMITER ;
<---------------------------------->

<-() DELETE value pada field tabel users ()->
DELIMITER $$
CREATE PROCEDURE delete_users(a int) 
BEGIN
UPDATE users set status = 0 WHERE id = a; 
END$$
DELIMITER ;
<---------------------------------->

<-() Select * value pada field tabel users ()->
DELIMITER $$
CREATE PROCEDURE get_users() 
BEGIN
SELECT * FROM users WHERE status = 1; 
END$$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE get_user(a varchar(50),b varchar (20)) 
BEGIN
SELECT * FROM users WHERE status = 1 AND name = a AND pswd = b; 
END$$
DELIMITER ;
<---------------------------------->


#t_beli

<-() INSERT nilai kedalam tabel t_beli ()->
DELIMITER $$
CREATE PROCEDURE insert_tbeli(a char(10),b date,c int) 
BEGIN
INSERT INTO t_beli VALUES(a,b,c); 
END$$
DELIMITER ;
<---------------------------------->

<-() UPDATE value pada field tabel t_beli ()->
DELIMITER $$
CREATE PROCEDURE update_tbeli(a char(10),b date,c int)
BEGIN
UPDATE t_beli SET tgl_beli = b , id_user = c  WHERE kd_beli = a; 
END$$
DELIMITER ;
<---------------------------------->

<-() delete value pada field tabel t_beli ()-> 
DELIMITER $$
CREATE PROCEDURE delete_tbeli(a char(10))
BEGIN
DELETE FROM t_beli  WHERE kd_beli = a; 
END$$
DELIMITER ;
<---------------------------------->


<-() Select * value pada field tabel t_beli ()->
DELIMITER $$
CREATE PROCEDURE get_tbeli()
BEGIN
SELECT * FROM t_beli;
END$$
DELIMITER ;
<---------------------------------->


#d_beli

<-() INSERT nilai kedalam tabel d_beli ()->
DELIMITER $$
CREATE PROCEDURE insert_dbeli(a int,b char(10),c char(10),d int) 
BEGIN
INSERT INTO d_beli VALUES(a,b,c,d); 
END$$
DELIMITER ;
<---------------------------------->

<-() UPDATE value pada field tabel d_beli ()->
DELIMITER $$
CREATE PROCEDURE update_dbeli(a int,b char(10),c char(10),d int)
BEGIN
UPDATE d_beli SET kd_beli = b , kd_brg = c , jml_beli = d  WHERE id = a; 
END$$
DELIMITER ;
<---------------------------------->


<-() delete value pada field tabel d_beli ()-> 
DELIMITER $$
CREATE PROCEDURE delete_dbeli(a int)
BEGIN
DELETE FROM d_beli  WHERE id = a; 
END$$
DELIMITER ;
<---------------------------------->


<-() Select * value pada field tabel d_beli ()->
DELIMITER $$
CREATE PROCEDURE get_dbeli()
BEGIN
SELECT * FROM d_beli;
END$$
DELIMITER ;
<---------------------------------->




#t_jual

<-() INSERT nilai kedalam tabel t_jual ()->
DELIMITER $$
CREATE PROCEDURE insert_tjual(a char(10),b date,c int) 
BEGIN
INSERT INTO t_jual VALUES(a,b,c); 
END$$
DELIMITER ;
<---------------------------------->

<-() UPDATE value pada field tabel t_jual ()->
DELIMITER $$
CREATE PROCEDURE update_tjual(a char(10),b date,c int)
BEGIN
UPDATE t_jual SET tgl_jual = b , id_user = c  WHERE kd_jual = a; 
END$$
DELIMITER ;
<---------------------------------->

<-() delete value pada field tabel t_jual ()-> 
DELIMITER $$
CREATE PROCEDURE delete_tjual(a char(10))
BEGIN
DELETE FROM t_jual  WHERE kd_jual = a; 
END$$
DELIMITER ;
<---------------------------------->


<-() Select * value pada field tabel t_jual ()->
DELIMITER $$
CREATE PROCEDURE get_tjual()
BEGIN
SELECT * FROM t_jual;
END$$
DELIMITER ;
<---------------------------------->



#d_jual

<-() INSERT nilai kedalam tabel d_jual ()->
DELIMITER $$
CREATE PROCEDURE insert_djual(a int,b char(10),c char(10),d int) 
BEGIN
INSERT INTO d_jual VALUES(a,b,c,d); 
END$$
DELIMITER ;
<---------------------------------->

<-() UPDATE value pada field tabel d_jual ()->
DELIMITER $$
CREATE PROCEDURE update_djual(a int,b char(10),c char(10),d int)
BEGIN
UPDATE d_jual SET kd_jual = b , kd_brg = c , jml_jual = d  WHERE id = a; 
END$$
DELIMITER ;
<---------------------------------->


<-() delete value pada field tabel d_jual ()-> 
DELIMITER $$
CREATE PROCEDURE delete_djual(a int)
BEGIN
DELETE FROM d_jual WHERE id = a; 
END$$
DELIMITER ;
<---------------------------------->


<-() Select * value pada field tabel d_jual ()->
DELIMITER $$
CREATE PROCEDURE get_djual()
BEGIN
SELECT * FROM d_jual;
END$$
DELIMITER ;
<---------------------------------->


#VIEW laporan_ppbarang

DELIMITER $$
CREATE PROCEDURE get_view_laporan_ppbarang()
BEGIN
SELECT * FROM laporan_ppbarang;
END$$
DELIMITER ;


#VIEW laporan_totsiventaris

DELIMITER $$ 	 
CREATE PROCEDURE get_view_laporan_totsiventaris()
BEGIN
SELECT * FROM laporan_totsiventaris;
END$$
DELIMITER ;


------------- TRIGGER --------------



# TRIGGER ON TABLE d_beli

<----() stok barang akan otomatis bertambah sesuai jumlah yang debeli jika terjadi transaksi beli barang ()---->
CREATE TRIGGER before_jml_beli_insert
BEFORE INSERT ON d_beli
FOR EACH ROW
UPDATE barang SET stok = stok + new.jml_beli WHERE barang.kd_brg = new.kd_brg;
<------------------------------------->

<----() stok barang akan otomatis berkuran sesuai jumlah yang didelete jika terjadi pembatalan  beli barang ()---->
CREATE TRIGGER before_jml_beli_delete
BEFORE DELETE ON d_beli
FOR EACH ROW
UPDATE barang SET stok = stok - old.jml_beli WHERE barang.kd_brg = old.kd_brg;
<------------------------------------->

<----() stok barang akan otomatis menyesesuaikan jumlah yang diupdate jika terjadi  update beli barang ()---->

CREATE TRIGGER before_jml_beli_update_kondisi_1
BEFORE UPDATE ON d_beli
FOR EACH ROW
UPDATE barang SET stok = stok - (old.jml_beli - new.jml_beli) WHERE barang.kd_brg = old.kd_brg && new.kd_brg = old.kd_brg;


CREATE TRIGGER before_jml_beli_update_kondisi_2
BEFORE UPDATE ON d_beli
FOR EACH ROW
UPDATE barang SET stok = stok - old.jml_beli WHERE barang.kd_brg = old.kd_brg && new.kd_brg != old.kd_brg;


CREATE TRIGGER before_jml_beli_update_kondisi_3
BEFORE UPDATE ON d_beli
FOR EACH ROW
UPDATE barang SET stok = stok + new.jml_beli WHERE barang.kd_brg = new.kd_brg && new.kd_brg != old.kd_brg;
<------------------------------------->


# TRIGGER ON TABLE t_beli

<----() stok barang akan otomatis berkuran sesuai jumlah yang didelete jika terjadi pembatalan  beli barang ()---->

CREATE TRIGGER before_kd_beli_delete
BEFORE DELETE ON t_beli
FOR EACH ROW
DELETE FROM d_beli WHERE d_beli.kd_beli = old.kd_beli;
<------------------------------------->



# TRIGGER ON TABLE d_jual

<----() stok barang akan otomatis berkurang sesuai jumlah yang dijual jika terjadi transaksi jual barang ()---->
CREATE TRIGGER before_jml_jual_insert
BEFORE INSERT ON d_jual
FOR EACH ROW
UPDATE barang SET stok = stok - new.jml_jual WHERE barang.kd_brg = new.kd_brg;
<------------------------------------->

<----() stok barang akan otomatis bertambah sesuai jumlah yang didelete jika terjadi pembatalan  jual barang ()---->
CREATE TRIGGER before_jml_jual_delete
BEFORE DELETE ON d_jual
FOR EACH ROW
UPDATE barang SET stok = stok + old.jml_jual WHERE barang.kd_brg = old.kd_brg;
<------------------------------------->

<----() stok barang akan otomatis menyesesuaikan jumlah yang diupdate jika terjadi  update jual barang ()---->

CREATE TRIGGER before_jml_jual_update_kondisi_1
BEFORE UPDATE ON d_jual
FOR EACH ROW
UPDATE barang SET stok = stok + (old.jml_jual - new.jml_jual) WHERE barang.kd_brg = old.kd_brg && new.kd_brg = old.kd_brg;

CREATE TRIGGER before_jml_jual_update_kondisi_2
BEFORE UPDATE ON d_jual
FOR EACH ROW
UPDATE barang SET stok = stok + old.jml_jual WHERE barang.kd_brg = old.kd_brg && new.kd_brg != old.kd_brg;


CREATE TRIGGER before_jml_jual_update_kondisi_3
BEFORE UPDATE ON d_jual
FOR EACH ROW
UPDATE barang SET stok = stok - new.jml_jual WHERE barang.kd_brg = new.kd_brg && new.kd_brg != old.kd_brg;
<------------------------------------->


# TRIGGER ON TABLE t_jual 

<----() stok barang akan otomatis berkuran sesuai jumlah yang didelete jika terjadi pembatalan  beli barang ()---->

CREATE TRIGGER before_kd_jual_delete
BEFORE DELETE ON t_jual
FOR EACH ROW
DELETE FROM d_jual WHERE d_jual.kd_jual = old.kd_jual;
<------------------------------------->


------------ View Table ------------------------

# view table for laporan transaksi penerimaan barang dan pengeluaran
CREATE VIEW laporan_ppbarang  AS
    SELECT 
        kd_brg as Kode Barang,
        nm_brg as Nama Barang,
	satuan as Satuan,
	hrg_beli as Harga Beli,
	hrg_jual as Harga Jual,
	stok_min as Stok Awal,
	jml_beli as Jml Beli,
	jml_jual as Jml jual
	stok as Stok Akhir,
    FROM
        barang natural join d_beli natural join d_jual;




# view table for laporan total nilai iventaris untuk setiap barang
CREATE VIEW laporan_totsiventaris  AS
	SELECT 
		kd_brg ,nm_brg, hrg_beli * stok as nilai_iventaris
	FROM barang;

----------------------------------------------------------------------------------------------------------------------------------------

### coretan ###
INSERT INTO d_beli VALUES(1,"KDB0004","B0001",5);
CALL insert_tbeli("KDB0003","2022/2/3",3);
CALL insert_tbeli("KDB0004","2022/2/4",3);
INSERT INTO d_beli VALUES(1,"KDB0004","B0005",5);
INSERT INTO d_beli VALUES(2,"KDB0004","B0005",5);
INSERT INTO d_beli VALUES(3,"KDB0004","B0005",5);
CALL get_barang();

CALL get_barang();
CALL update_dbeli(2,"KDB0004","B0001",5);
CALL get_barang();

5

25

10 - upadate

25 + (5-10)

20



stok  = stok + (old.jml_jual-new.jml_jual) -> trigger jual 
stok  = stok - (old.jml_jual-new.jml_jual) -> trigger beli 


call get_tjual();
call insert_tjual("KDBJ0001","2022-1-22",3);
call get_tjual();
